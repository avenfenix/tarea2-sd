// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.0--rc2
// source: proto/example.proto

package grpc_example

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SaludadorClient is the client API for Saludador service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SaludadorClient interface {
	DecirHola(ctx context.Context, in *SolicitudHola, opts ...grpc.CallOption) (*RespuestaHola, error)
}

type saludadorClient struct {
	cc grpc.ClientConnInterface
}

func NewSaludadorClient(cc grpc.ClientConnInterface) SaludadorClient {
	return &saludadorClient{cc}
}

func (c *saludadorClient) DecirHola(ctx context.Context, in *SolicitudHola, opts ...grpc.CallOption) (*RespuestaHola, error) {
	out := new(RespuestaHola)
	err := c.cc.Invoke(ctx, "/grpc_example.Saludador/DecirHola", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SaludadorServer is the server API for Saludador service.
// All implementations must embed UnimplementedSaludadorServer
// for forward compatibility
type SaludadorServer interface {
	DecirHola(context.Context, *SolicitudHola) (*RespuestaHola, error)
	mustEmbedUnimplementedSaludadorServer()
}

// UnimplementedSaludadorServer must be embedded to have forward compatible implementations.
type UnimplementedSaludadorServer struct {
}

func (UnimplementedSaludadorServer) DecirHola(context.Context, *SolicitudHola) (*RespuestaHola, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecirHola not implemented")
}
func (UnimplementedSaludadorServer) mustEmbedUnimplementedSaludadorServer() {}

// UnsafeSaludadorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SaludadorServer will
// result in compilation errors.
type UnsafeSaludadorServer interface {
	mustEmbedUnimplementedSaludadorServer()
}

func RegisterSaludadorServer(s grpc.ServiceRegistrar, srv SaludadorServer) {
	s.RegisterService(&Saludador_ServiceDesc, srv)
}

func _Saludador_DecirHola_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolicitudHola)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaludadorServer).DecirHola(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_example.Saludador/DecirHola",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaludadorServer).DecirHola(ctx, req.(*SolicitudHola))
	}
	return interceptor(ctx, in, info, handler)
}

// Saludador_ServiceDesc is the grpc.ServiceDesc for Saludador service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Saludador_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_example.Saludador",
	HandlerType: (*SaludadorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DecirHola",
			Handler:    _Saludador_DecirHola_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/example.proto",
}
